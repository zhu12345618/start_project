{"version":3,"sources":["Applications/CocosCreator.app/Contents/Resources/app.asar/node_modules/browser-pack/_prelude.js","scripts/Game.js","project.js","scripts/Player.js","scripts/Star.js"],"names":["require","e","t","n","r","s","o","u","a","i","f","Error","code","l","exports","call","length","Game","module","cc","_RFpush","Class","extends","Component","properties","starPrefab","default","type","Prefab","maxStarDuration","minStarDuration","ground","Node","player","scoreDisplay","Label","scoreAudio","url","AudioClip","onLoad","this","groundY","y","height","timer","starDuration","spawnNewStar","score","update","dt","gameOver","newStar","instantiate","node","addChild","setPosition","getNewStarPosition","getComponent","game","random0To1","randX","randY","jumpHeight","maxX","width","randomMinus1To1","p","gainScore","string","toString","audioEngine","playEffect","stopAllActions","director","loadScene","_RFpop","Player","jumpDuration","maxMoveSpeed","accel","jumpAudio","jumpAction","setJumpAction","runAction","accLeft","accright","xSpeed","setInputControl","accRight","Math","abs","x","jumpUp","moveBy","easing","easeCubicActionOut","jumpDown","easeCubicActionIn","callback","callFunc","playJumpSound","repeatForever","sequence","self","eventManager","addListener","event","EventListener","KEYBOARD","onKeyPressed","keyCode","KEY","d","onKeyReleased","Star","pickRadius","getPlayerDistance","onPicked","opacityRatio","minOpacity","opacity","floor","playerPos","getPosition","dist","pDistance","position","destroy"],"mappings":"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","file":"project.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\ncc._RFpush(module, '7b863EfSvpNQLUzEIzJ/h0d', 'Game');\n// scripts/Game.js\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        //这个属性引用了星星预制资源\n        starPrefab: {\n            'default': null,\n            type: cc.Prefab\n        },\n        //星星产生后消失时间的随机范围\n        maxStarDuration: 0,\n        minStarDuration: 0,\n        //地面节点，用于确定星星生成的高度\n        ground: {\n            'default': null,\n            type: cc.Node\n        },\n        //player 节点，用于获取主角弹跳的高度，和控制主角行动开关\n        player: {\n            'default': null,\n            type: cc.Node\n        },\n        scoreDisplay: {\n            'default': null,\n            type: cc.Label\n        },\n        //得分音效资源\n        scoreAudio: {\n            'default': null,\n            url: cc.AudioClip\n        }\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.groundY = this.ground.y + this.ground.height / 2;\n\n        //初始化计时器\n        this.timer = 0;\n        this.starDuration = 0;\n        //生成一个新的星星\n        this.spawnNewStar();\n        //初始化计分\n        this.score = 0;\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        if (this.timer > this.starDuration) {\n            this.gameOver();\n            return;\n        }\n        this.timer += dt;\n    },\n\n    spawnNewStar: function spawnNewStar() {\n        //使用给定的模板在场景中生成一个新节点\n        var newStar = cc.instantiate(this.starPrefab);\n        //将新增的节点添加到Canvas节点下面\n        this.node.addChild(newStar);\n        //为星星设置一个随机位置\n        newStar.setPosition(this.getNewStarPosition());\n        //将Game组件的实例传入星星组件\n        newStar.getComponent('Star').game = this;\n\n        //重置计时器根据消失时间随机取一个值\n        this.starDuration = this.minStarDuration + cc.random0To1() * (this.maxStarDuration - this.minStarDuration);\n        this.timer = 0;\n    },\n    getNewStarPosition: function getNewStarPosition() {\n        var randX = 0;\n        //根据地平面位置和主角跳跃高度，随机得到一个星星的y坐标\n        var randY = this.groundY + cc.random0To1() * this.player.getComponent('Player').jumpHeight + 50;\n        //根据屏幕宽度，随机得到一个星星x坐标\n        var maxX = this.node.width / 2;\n        randX = cc.randomMinus1To1() * maxX;\n\n        //返回星星坐标\n        return cc.p(randX, randY);\n    },\n    gainScore: function gainScore() {\n        this.score += 1;\n        //更新scoreDisplay Label的文字\n        this.scoreDisplay.string = \"Score : \" + this.score.toString();\n        //播放得分音效\n        cc.audioEngine.playEffect(this.scoreAudio, false);\n    },\n    gameOver: function gameOver() {\n        this.player.stopAllActions(); //停止player节点的跳跃动作\n        cc.director.loadScene(\"game\");\n    }\n});\n\ncc._RFpop();","require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({\"Game\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, '7b863EfSvpNQLUzEIzJ/h0d', 'Game');\n// scripts/Game.js\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        //这个属性引用了星星预制资源\n        starPrefab: {\n            'default': null,\n            type: cc.Prefab\n        },\n        //星星产生后消失时间的随机范围\n        maxStarDuration: 0,\n        minStarDuration: 0,\n        //地面节点，用于确定星星生成的高度\n        ground: {\n            'default': null,\n            type: cc.Node\n        },\n        //player 节点，用于获取主角弹跳的高度，和控制主角行动开关\n        player: {\n            'default': null,\n            type: cc.Node\n        },\n        scoreDisplay: {\n            'default': null,\n            type: cc.Label\n        },\n        //得分音效资源\n        scoreAudio: {\n            'default': null,\n            url: cc.AudioClip\n        }\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.groundY = this.ground.y + this.ground.height / 2;\n\n        //初始化计时器\n        this.timer = 0;\n        this.starDuration = 0;\n        //生成一个新的星星\n        this.spawnNewStar();\n        //初始化计分\n        this.score = 0;\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        if (this.timer > this.starDuration) {\n            this.gameOver();\n            return;\n        }\n        this.timer += dt;\n    },\n\n    spawnNewStar: function spawnNewStar() {\n        //使用给定的模板在场景中生成一个新节点\n        var newStar = cc.instantiate(this.starPrefab);\n        //将新增的节点添加到Canvas节点下面\n        this.node.addChild(newStar);\n        //为星星设置一个随机位置\n        newStar.setPosition(this.getNewStarPosition());\n        //将Game组件的实例传入星星组件\n        newStar.getComponent('Star').game = this;\n\n        //重置计时器根据消失时间随机取一个值\n        this.starDuration = this.minStarDuration + cc.random0To1() * (this.maxStarDuration - this.minStarDuration);\n        this.timer = 0;\n    },\n    getNewStarPosition: function getNewStarPosition() {\n        var randX = 0;\n        //根据地平面位置和主角跳跃高度，随机得到一个星星的y坐标\n        var randY = this.groundY + cc.random0To1() * this.player.getComponent('Player').jumpHeight + 50;\n        //根据屏幕宽度，随机得到一个星星x坐标\n        var maxX = this.node.width / 2;\n        randX = cc.randomMinus1To1() * maxX;\n\n        //返回星星坐标\n        return cc.p(randX, randY);\n    },\n    gainScore: function gainScore() {\n        this.score += 1;\n        //更新scoreDisplay Label的文字\n        this.scoreDisplay.string = \"Score : \" + this.score.toString();\n        //播放得分音效\n        cc.audioEngine.playEffect(this.scoreAudio, false);\n    },\n    gameOver: function gameOver() {\n        this.player.stopAllActions(); //停止player节点的跳跃动作\n        cc.director.loadScene(\"game\");\n    }\n});\n\ncc._RFpop();\n},{}],\"Player\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, 'eab9dy5SFNIJIN0plWxcF6R', 'Player');\n// scripts/Player.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        //主角跳跃高度\n        jumpHeight: 0,\n        //主角跳跃持续时间\n        jumpDuration: 0,\n        //最大移动速度\n        maxMoveSpeed: 0,\n        //加速度\n        accel: 0,\n        //跳跃音效资源\n        jumpAudio: {\n            \"default\": null,\n            url: cc.AudioClip\n        }\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.jumpAction = this.setJumpAction();\n        this.node.runAction(this.jumpAction);\n\n        //加速度方向开关\n        this.accLeft = false;\n        this.accright = false;\n\n        //主角当前水平方向速度\n        this.xSpeed = 0;\n\n        //初始化键盘输入监听\n        this.setInputControl();\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        if (this.accLeft) {\n            this.xSpeed -= this.accel * dt;\n        } else if (this.accRight) {\n            this.xSpeed += this.accel * dt;\n        }\n\n        //限制主角的速度不能超过最大值\n        if (Math.abs(this.xSpeed) > this.maxMoveSpeed) {\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\n        }\n\n        this.node.x += this.xSpeed * dt;\n    },\n    setJumpAction: function setJumpAction() {\n        // 跳跃上升\n        var jumpUp = cc.moveBy(this.jumpDuration, cc.p(0, this.jumpHeight)).easing(cc.easeCubicActionOut());\n        // 下落\n        var jumpDown = cc.moveBy(this.jumpDuration, cc.p(0, -this.jumpHeight)).easing(cc.easeCubicActionIn());\n        //添加一个回调函数，用于在动作结束时调用 我们定义的其他方法\n        var callback = cc.callFunc(this.playJumpSound, this);\n        // 不断重复\n        return cc.repeatForever(cc.sequence(jumpUp, jumpDown, callback));\n    },\n    setInputControl: function setInputControl() {\n        var self = this;\n        cc.eventManager.addListener({\n            event: cc.EventListener.KEYBOARD,\n            onKeyPressed: function onKeyPressed(keyCode, event) {\n                switch (keyCode) {\n                    case cc.KEY.a:\n                        self.accLeft = true;\n                        self.accRight = false;\n                        break;\n                    case cc.KEY.d:\n                        self.accLeft = false;\n                        self.accRight = true;\n                        break;\n                }\n            },\n            onKeyReleased: function onKeyReleased(keyCode, event) {\n                switch (keyCode) {\n                    case cc.KEY.a:\n                        self.accLeft = false;\n                        break;\n                    case cc.KEY.d:\n                        self.accRight = false;\n                        break;\n                }\n            }\n        }, self.node);\n    },\n    playJumpSound: function playJumpSound() {\n        //调用声音引擎播放声音\n        cc.audioEngine.playEffect(this.jumpAudio, false);\n    }\n});\n\ncc._RFpop();\n},{}],\"Star\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, 'bed0eXpue1IJ7oiuk74ti0k', 'Star');\n// scripts/Star.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        pickRadius: 0\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {},\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        //每帧判断和主角之间的距离是否小于收集距离\n        if (this.getPlayerDistance() < this.pickRadius) {\n            //调用收集行为\n            this.onPicked();\n            return;\n        }\n        var opacityRatio = 1 - this.game.timer / this.game.starDuration;\n        var minOpacity = 50;\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\n    },\n    getPlayerDistance: function getPlayerDistance() {\n        //根据player 节点位置判断距离\n        var playerPos = this.game.player.getPosition();\n        //根据两点位置计算两点之间距离\n        var dist = cc.pDistance(this.node.position, playerPos);\n        return dist;\n    },\n    onPicked: function onPicked() {\n        //当星星被收集时，调用Game脚本中的接口，生成一个新的星星\n        this.game.spawnNewStar();\n        //调用Game脚本的得分方法\n        this.game.gainScore();\n        this.node.destroy();\n    }\n});\n\ncc._RFpop();\n},{}]},{},[\"Game\",\"Star\",\"Player\"])\n\n","\"use strict\";\ncc._RFpush(module, 'eab9dy5SFNIJIN0plWxcF6R', 'Player');\n// scripts/Player.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        //主角跳跃高度\n        jumpHeight: 0,\n        //主角跳跃持续时间\n        jumpDuration: 0,\n        //最大移动速度\n        maxMoveSpeed: 0,\n        //加速度\n        accel: 0,\n        //跳跃音效资源\n        jumpAudio: {\n            \"default\": null,\n            url: cc.AudioClip\n        }\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.jumpAction = this.setJumpAction();\n        this.node.runAction(this.jumpAction);\n\n        //加速度方向开关\n        this.accLeft = false;\n        this.accright = false;\n\n        //主角当前水平方向速度\n        this.xSpeed = 0;\n\n        //初始化键盘输入监听\n        this.setInputControl();\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        if (this.accLeft) {\n            this.xSpeed -= this.accel * dt;\n        } else if (this.accRight) {\n            this.xSpeed += this.accel * dt;\n        }\n\n        //限制主角的速度不能超过最大值\n        if (Math.abs(this.xSpeed) > this.maxMoveSpeed) {\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\n        }\n\n        this.node.x += this.xSpeed * dt;\n    },\n    setJumpAction: function setJumpAction() {\n        // 跳跃上升\n        var jumpUp = cc.moveBy(this.jumpDuration, cc.p(0, this.jumpHeight)).easing(cc.easeCubicActionOut());\n        // 下落\n        var jumpDown = cc.moveBy(this.jumpDuration, cc.p(0, -this.jumpHeight)).easing(cc.easeCubicActionIn());\n        //添加一个回调函数，用于在动作结束时调用 我们定义的其他方法\n        var callback = cc.callFunc(this.playJumpSound, this);\n        // 不断重复\n        return cc.repeatForever(cc.sequence(jumpUp, jumpDown, callback));\n    },\n    setInputControl: function setInputControl() {\n        var self = this;\n        cc.eventManager.addListener({\n            event: cc.EventListener.KEYBOARD,\n            onKeyPressed: function onKeyPressed(keyCode, event) {\n                switch (keyCode) {\n                    case cc.KEY.a:\n                        self.accLeft = true;\n                        self.accRight = false;\n                        break;\n                    case cc.KEY.d:\n                        self.accLeft = false;\n                        self.accRight = true;\n                        break;\n                }\n            },\n            onKeyReleased: function onKeyReleased(keyCode, event) {\n                switch (keyCode) {\n                    case cc.KEY.a:\n                        self.accLeft = false;\n                        break;\n                    case cc.KEY.d:\n                        self.accRight = false;\n                        break;\n                }\n            }\n        }, self.node);\n    },\n    playJumpSound: function playJumpSound() {\n        //调用声音引擎播放声音\n        cc.audioEngine.playEffect(this.jumpAudio, false);\n    }\n});\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, 'bed0eXpue1IJ7oiuk74ti0k', 'Star');\n// scripts/Star.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        pickRadius: 0\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {},\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        //每帧判断和主角之间的距离是否小于收集距离\n        if (this.getPlayerDistance() < this.pickRadius) {\n            //调用收集行为\n            this.onPicked();\n            return;\n        }\n        var opacityRatio = 1 - this.game.timer / this.game.starDuration;\n        var minOpacity = 50;\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\n    },\n    getPlayerDistance: function getPlayerDistance() {\n        //根据player 节点位置判断距离\n        var playerPos = this.game.player.getPosition();\n        //根据两点位置计算两点之间距离\n        var dist = cc.pDistance(this.node.position, playerPos);\n        return dist;\n    },\n    onPicked: function onPicked() {\n        //当星星被收集时，调用Game脚本中的接口，生成一个新的星星\n        this.game.spawnNewStar();\n        //调用Game脚本的得分方法\n        this.game.gainScore();\n        this.node.destroy();\n    }\n});\n\ncc._RFpop();"],"sourceRoot":"/source/"}